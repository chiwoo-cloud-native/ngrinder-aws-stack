import static net.grinder.script.Grinder.grinder
import static org.junit.Assert.*
import static org.hamcrest.Matchers.*
import net.grinder.script.GTest
import net.grinder.script.Grinder
import net.grinder.scriptengine.groovy.junit.GrinderRunner
import net.grinder.scriptengine.groovy.junit.annotation.BeforeProcess
import net.grinder.scriptengine.groovy.junit.annotation.BeforeThread
// import static net.grinder.util.GrinderUtils.* // You can use this if you're using nGrinder after 3.2.3
import org.junit.Before
import org.junit.BeforeClass
import org.junit.Test
import org.junit.runner.RunWith

import org.ngrinder.http.HTTPRequest
import org.ngrinder.http.HTTPRequestControl
import org.ngrinder.http.HTTPResponse
import org.ngrinder.http.cookie.Cookie
import org.ngrinder.http.cookie.CookieManager
import java.util.Random

/**
 * A simple example using the HTTP plugin that shows the retrieval of a single page via HTTP.
 *
 * This script is automatically generated by ngrinder.
 *
 * @author admin
 */
@RunWith(GrinderRunner)
class TestRunner {

    public static GTest test
    public static HTTPRequest request
    public static Map<String, String> headers = [:]
    public static List<Cookie> cookies = []

    @BeforeProcess
    public static void beforeProcess() {
        HTTPRequestControl.setConnectionTimeout(300000)
        test = new GTest(1, "ngrinder-an1t-pub-alb-458650020.ap-northeast-1.elb.amazonaws.com")
        request = new HTTPRequest()

        // Set header data
        headers.put("Content-Type", "application/json")
        grinder.logger.info("before process.")
    }

    @BeforeThread
    public void beforeThread() {
        test.record(this, "collector")
        grinder.statistics.delayReports = true
        grinder.logger.info("before thread.")
    }

    @Before
    public void before() {
        request.setHeaders(headers)
        CookieManager.addCookies(cookies)
        grinder.logger.info("before. init headers and cookies")
    }

    static final Random rand = new Random()

    String payload() {
        Integer id     = rand.nextInt(60001 - 10001) + 10001
        String name    = Long.toString(Math.abs(rand.nextLong() % 3656158440062976L), 36);
        Integer height = rand.nextInt(190 - 165) + 165
        Integer weight = rand.nextInt(100 - 46) + 46
        Integer year   = rand.nextInt(2003 - 1970) + 1970
        Integer mon    = rand.nextInt(12 - 1) + 1
        Integer day    = rand.nextInt(31 - 1) + 1
        Long    now    = System.currentTimeMillis()
        return "{ \"id\": \"I" + id + "\", \"name\": \"" + name + "\", \"birthday\": \"" + year + "-" + mon + "-" + day  + "\", \"height\": "+height+", \"weight\": "+weight+",\n \"timestamp\": "+now+"}"
    }

    @Test
    public void test() {
        HTTPResponse response = request.POST("http://ngrinder-an1t-pub-alb-458650020.ap-northeast-1.elb.amazonaws.com:80/api/collect", payload().getBytes())

        if (response.statusCode == 301 || response.statusCode == 302) {
            grinder.logger.warn("Warning. The response may not be correct. The response code was {}.", response.statusCode)
        } else {
            assertThat(response.statusCode, is(201))
        }
    }
}
